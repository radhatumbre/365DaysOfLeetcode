#define ll long long
class Solution {
public:
    vector<int> temp; // to avoid TLE Declare here. So it's not intialized for every merge call

    ll cnt = 0;
    void merge(vector<int>& v, ll low, ll mid, ll high)
    {
        temp.clear();
        
        ll left = low;
        ll right = mid+1;
        
        while(left <= mid and right <= high)
        {
            if(v[left] <= v[right])
            {
                temp.push_back(v[left]);
                left++;
            }
            else
            {
                temp.push_back(v[right]);
                cnt += (mid - left + 1);
                right++;
            }
        }
        
        while(left <= mid)
        {
            temp.push_back(v[left]);
            left++;
        }
        
        while(right <= high)
        {
            temp.push_back(v[right]);
            right++;
        }
        
        for(int i=low; i<=high; i++)
        {
            v[i] =  temp[i-low];
        }
    }
    
    void mergeSort(vector<int>& v, ll low, ll high)
    {        
        if(low<high)
        {
            ll mid = low + (high - low)/2;
            
            mergeSort(v, low, mid);
            mergeSort(v,mid+1, high);
            
            merge(v, low, mid, high);
        }
        
    }

    long long localInversion(vector<int>& arr, int n){
        long long inv_count = 0;
        for(int i=0; i<n-1; i++){
            if(arr[i]>arr[i+1]){
                inv_count++;
            }
        }
        return inv_count;
    }
    bool isIdealPermutation(vector<int>& nums) {
        // we count local inversion first cause global will sort the array
        long long local = localInversion(nums, nums.size());
        mergeSort(nums, 0, nums.size()-1);

        cout<<cnt<<endl;
        cout<<local<<endl;

        return cnt==local;
    }
};
