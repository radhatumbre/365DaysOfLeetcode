class Solution {
public:
    int minimumRounds(vector<int>& tasks) {
        sort(tasks.begin(), tasks.end());
        int ans = 0;
        int i=0, j=0;
        while(j<=tasks.size()){
            if(j==tasks.size() || tasks[j]!=tasks[i]){
                int freq = j-i;
                if(freq==1)
                    return -1;
                else if(freq %3==0)
                    ans += freq/3;
                else
                    ans += freq/3 - 1 + 2;
                
                i=j; 
                j++;
            }
            else{
                j++;
            }
        }
        return ans;

    }
};


// unordered_map<int, int> map;
//         for(int i=0; i<tasks.size(); i++){
//             map[tasks[i]]++;
//         }
//         int ans = 0;
//         for(auto e : map){
//             if(e.second==1)
//                 return -1;
//             else if(e.second %3==0)
//                 ans += e.second/3;
//             // rem 2 -> ans += e.second/3 + 1;
//             // rem 1 -> ans += e.second/3 - 1 + 2;
//             else
//                 ans += e.second/3 - 1 + 2;
//         }
//         return ans;
