class Solution {
    public boolean wordPattern(String pattern, String s) {
        HashMap<Character, String> map = new HashMap<Character, String>();
        String[] elements = s.split(" ");   //  all words in the array 

        if(elements.length != pattern.length())
            return false; 
            
        // check if value of a and b is be same
        // both s and pattern should have equal number of distinct elements
        HashSet<String> set1 = new HashSet<String>();   //  words in s
        for(int i=0; i<elements.length; i++){
            set1.add(elements[i]);
        }
        HashSet<Character> set2 = new HashSet<Character>(); //  letters in pattern
        for(int i=0; i<pattern.length(); i++){
            set2.add(pattern.charAt(i));
        }
        if(set1.size() != set2.size())
            return false;


        // check the order of s according to pattern 
        for(int i=0; i<pattern.length(); i++){
            char c = pattern.charAt(i);
            String word = elements[i];
            if(map. containsKey(c)){
                if(!map.get(c).equals(word))    //  key and value doesnt match
                    return false;
            }
            else{
                map.put(c,word);
            }

        }

        


        return true;
    }
}
