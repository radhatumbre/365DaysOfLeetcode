// Method 1

class Solution {
public:
    int visited[205];
    void check(vector<int> v[],int itr)
    {
        if(visited[itr]) 
            return;

        visited[itr]=1;
        for(int i=0;i<v[itr].size();i++)
            check(v,v[itr][i]);

        return;
    }


    int findCircleNum(vector<vector<int>>& isConnected) {
        int provinces=0; 
        vector<int> v[isConnected.size()];

        for(int i=0;i<isConnected.size();i++)
            for(int j=0;j<isConnected[i].size();j++)
                if(isConnected[i][j])v[i].push_back(j);


        for(int i=0; i<isConnected.size();i++){
            if(!visited[i])
            {
                check(v,i);
                provinces++;
            }
        }
        return provinces;
    }
};



// Method 2


class Solution {
    public:
    int V;  //Vertices
	vector<list<int> > adj;
    vector<bool> visited;

    void addEdge(int v, int w){
        adj[v].push_back(w);
    }

    void BFS(int s){
        queue<int> queue;

        visited[s] = true;
        queue.push(s);

        while (!queue.empty()) {

            s = queue.front();
            cout << s << " ";
            queue.pop();

            for (auto adjacent : adj[s]) {
                if (!visited[adjacent]) {
                    visited[adjacent] = true;
                    queue.push(adjacent);
                }
            }
        }
    }

    int findCircleNum(vector<vector<int>>& isConnected) {
        V = isConnected.size();
        adj.resize(V);
        visited.resize(V);
        int provinces = 0;
        for(int i=0; i<isConnected.size(); i++){
            for(int j=0; j<isConnected.size(); j++){
                if(isConnected[i][j]==1)
                    addEdge(i, j);
            }
        }

        for(int i=0; i<isConnected.size(); i++){
            if(!visited[i]){
                provinces++;
                BFS(i);
            }
        }
        return provinces;
    }



};
