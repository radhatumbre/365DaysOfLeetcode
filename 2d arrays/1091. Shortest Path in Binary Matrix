class Solution {
public:
    struct Point{
        int x;
        int y;
        int count;
    };

    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        // BFS method
        // all 8 direction pairing
        int dx[8] = {1,1,1,-1,-1,-1,0,0};
        int dy[8] = {0,1,-1,0,1,-1,1,-1};

        if (grid[0][0]==1) return -1;

        int row = grid.size();
        int col = grid[0].size();

        queue<Point> q;

        // first element that is 0,0
        q.push({0,0,1});
        grid[0][0] = -1;    // to make it visited

        while(!q.empty()){
            Point p = q.front();
            q.pop();
            if(p.x==row-1 && p.y==col-1)
                return p.count;
                
            for(int i=0; i<8; i++){
                int x = p.x + dx[i];
                int y = p.y + dy[i];

                if(x>=0 && y>=0 && x<row && y<col && grid[x][y]==0){
                    q.push({x,y,p.count+1});
                    grid[x][y] = -1;
                }
            }
        }
        return -1;

    }
};
















